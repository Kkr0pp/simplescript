PROGRAM -> SLIST
SLIST -> STMT SLIST_PRIME
SLIST_PRIME -> SLIST | e
STMT -> SIMPLE_STMT |  COMPOUND_STMT
SIMPLE_STMT -> DECL_STMT | ASSIGN_STMT | RETURN_STMT | IO_STMT | LITERAL | STOP_STMT | SKIP_STMT
DECL_STMT -> let DATA_TYPE IDENTIFIER ;
ASSIGN_STMT -> IDENTIFIER be LITERAL ; | e
RETURN_STMT -> return LITERAL ;
DATA_TYPE -> string | int | float | bool
IO_STMT -> SHOW_FUNC | GIVE_FUNC
SHOW_FUNC -> show ( SIMPLE_STMT ) ;
GIVE_FUNC -> give ( SIMPLE_STMT ) ;
LITERAL -> STRING | BOOL | FLOAT | INT
STRING -> (literal string value like “Hello World!”)
BOOL -> yes | no
INT -> 0-9 integer
FLOAT -> INT.INT
COMPOUND_STMT -> IF_STMT | LOOP_STMT | FUNC_STMT
IF_STMT -> check (EXP) { SIMPLE_STMT } ELSE_STMT
ELSE_STMT -> otherwise { SIMPLE_STMT } | e
EXP           -> ARITHMETIC_EXP | COMPARISON_EXP | LOGICAL_EXP  |
ARITHMETIC_EXP      -> TERM| ARITHMETIC_EXP  ARITHMETIC_OP TERM
TERM                -> FACTOR | TERM ARITHMETIC_OP FACTOR
FACTOR             ->  INT | ( EXP )
COMPARISON_EXP    -> EXP COMPARISON_OP EXP
LOGICAL_EXP        -> EXP  LOGICAL_OP EXP  | LOGICAL_OP EXP
ARITHMETIC_OP        -> plus
ARITHMETIC_OP        -> minus
ARITHMETIC_OP        -> times
ARITHMETIC_OP        -> over
ARITHMETIC_OP        -> mod
COMPARISON_OP        -> is
COMPARISON_OP        -> isnt
COMPARISON_OP        -> less
COMPARISON_OP        -> more
COMPARISON_OP        -> lesseq
COMPARISON_OP        -> moreeq
LOGICAL_OP           -> and
LOGICAL_OP           -> or
LOGICAL_OP           -> not
FUNC_DEC -> task RETURN_TYPE IDENTIFIER ( PARAMS ) FUNC_DEC_PRIME
FUNC_DEC_PRIME -> SIMPLE_STMT | COMPOUND_STMT
RETURN_TYPE -> void
RETURN_TYPE -> DATA_TYPE
PARAMS -> DATA_TYPE IDENTIFIER PARAMS_PRIME
PARAMS_PRIME -> , PARAM | e

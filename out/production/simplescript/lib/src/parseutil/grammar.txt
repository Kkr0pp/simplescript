START_PRIME -> STMT PROGRAM_PRIME
START -> ε
PROGRAM_PRIME -> STMT PROGRAM_PRIME
PROGRAM_PRIME -> ε
STMT -> SIMPLE_STMT
STMT -> COMPOUND_STMT
SIMPLE_STMT -> DECL_STMT
SIMPLE_STMT -> ASSIGN_STMT
SIMPLE_STMT -> RETURN_STMT
SIMPLE_STMT -> IO_STMT
SIMPLE_STMT -> LITERAL
SIMPLE_STMT -> STOP_STMT
SIMPLE_STMT -> SKIP_STMT
DECL_STMT -> let DATA_TYPE IDENTIFIER ;
ASSIGN_STMT -> IDENTIFIER be LITERAL ;
ASSIGN_STMT -> ε
RETURN_STMT -> return LITERAL ;
DATA_TYPE -> string
DATA_TYPE -> int
DATA_TYPE -> float
DATA_TYPE -> bool
IO_STMT -> SHOW_FUNC
IO_STMT -> GIVE_FUNC
SHOW_FUNC -> show ( SIMPLE_STMT ) ;
GIVE_FUNC -> give ( SIMPLE_STMT ) ;
LITERAL -> STRING
LITERAL -> INT
LITERAL -> FLOAT
LITERAL -> BOOL
BOOL -> yes
BOOL -> no
COMPOUND_STMT -> CONDITIONAL_STMT
COMPOUND_STMT -> LOOP_STMT
COMPOUND_STMT -> FUNC_STMT
CONDITIONAL_STMT -> IF_STMT
CONDITIONAL_STMT -> IF_ELSE_STMT
CONDITIONAL_STMT -> ELSE_IF_STMT
IF_STMT -> check ( SIMPLE_STMT ) { SIMPLE_STMT } IF_ELSE_STMT ELSE_IF_STMT
IF_STMT -> check ( SIMPLE_STMT ) { COMPOUND_STMT } IF_ELSE_STMT ELSE_IF_STMT
IF_ELSE_STMT -> orcheck ( SIMPLE_STMT ) { SIMPLE_STMT } IF_ELSE_STMT ELSE_IF_STMT
IF_ELSE_STMT -> orcheck ( SIMPLE_STMT ) { COMPOUND_STMT } ELSE_IF_STMT
IF_ELSE_STMT -> ε
ELSE_IF_STMT -> otherwise { SIMPLE_STMT }
ELSE_IF_STMT -> otherwise { COMPOUND_STMT }
ELSE_IF_STMT -> ε
LOOP_STMT -> FOR_STMT
LOOP_STMT -> WHILE_STMT
LOOP_STMT -> STOP_STMT
LOOP_STMT -> SKIP_STMT
FUNC_DEC -> task RETURN_TYPE IDENTIFIER ( PARAMS ) { SIMPLE_STMT }
FUNC_DEC -> task RETURN_TYPE IDENTIFIER ( PARAMS ) { COMPOUND_STMT }
RETURN_TYPE -> void
RETURN_TYPE -> DATA_TYPE
PARAMS -> DATA_TYPE IDENTIFIER PARAMS_PRIME
PARAMS_PRIME -> , DATA_TYPE IDENTIFIER PARAMS_PRIME
PARAMS_PRIME -> ε
ARITHMETIC_OP -> plus
ARITHMETIC_OP -> minus
ARITHMETIC_OP -> times
ARITHMETIC_OP -> over
ARITHMETIC_OP -> mod
COMPARISON_OP -> is
COMPARISON_OP -> isnt
COMPARISON_OP -> less
COMPARISON_OP -> more
COMPARISON_OP -> lesseq
COMPARISON_OP -> moreeq
LOGICAL_OP -> and
LOGICAL_OP -> or
LOGICAL_OP -> not
STOP_STMT -> stop ;
